{
  "hash": "f54b00195a1e766c0ad6efeab3a15f9d",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 5 - Part 2\"\nsubtitle: \"Visual Correlation Analysis\"\ndate: \"15 January 2024\"\ndate-modified: \"last-modified\"\nauthor: \"Teo Suan Ern\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n*Note: Last modified to include author’s details.*\n\n# 1. Getting Started\n\n## 1.1 Install and launch R packages\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\n-   **tidyverse**, a family of R packages for data science process,\n\n-   **plotly** for creating interactive funnel plot,\n\n-   **corrplot** for varied plotting options in visualisation method, graphic layout, colour, legend etc.\n\n-   **ggpubr** for customising ggplot2-based graphs\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse,\n               ellipse, RColorBrewer)\n```\n:::\n\n\n## 1.2 Import the data\n\nThis exercise uses **winequality-red.csv** from [Wine Quality Data Set](https://archive.ics.uci.edu/dataset/186/wine+quality) of UCI Machine Learning Repository.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n## 1.3 Overview of the data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nsummary(wine)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n fixed acidity    volatile acidity  citric acid     residual sugar  \n Min.   : 3.800   Min.   :0.0800   Min.   :0.0000   Min.   : 0.600  \n 1st Qu.: 6.400   1st Qu.:0.2300   1st Qu.:0.2500   1st Qu.: 1.800  \n Median : 7.000   Median :0.2900   Median :0.3100   Median : 3.000  \n Mean   : 7.215   Mean   :0.3397   Mean   :0.3186   Mean   : 5.443  \n 3rd Qu.: 7.700   3rd Qu.:0.4000   3rd Qu.:0.3900   3rd Qu.: 8.100  \n Max.   :15.900   Max.   :1.5800   Max.   :1.6600   Max.   :65.800  \n   chlorides       free sulfur dioxide total sulfur dioxide    density      \n Min.   :0.00900   Min.   :  1.00      Min.   :  6.0        Min.   :0.9871  \n 1st Qu.:0.03800   1st Qu.: 17.00      1st Qu.: 77.0        1st Qu.:0.9923  \n Median :0.04700   Median : 29.00      Median :118.0        Median :0.9949  \n Mean   :0.05603   Mean   : 30.53      Mean   :115.7        Mean   :0.9947  \n 3rd Qu.:0.06500   3rd Qu.: 41.00      3rd Qu.:156.0        3rd Qu.:0.9970  \n Max.   :0.61100   Max.   :289.00      Max.   :440.0        Max.   :1.0390  \n       pH          sulphates         alcohol         quality     \n Min.   :2.720   Min.   :0.2200   Min.   : 8.00   Min.   :3.000  \n 1st Qu.:3.110   1st Qu.:0.4300   1st Qu.: 9.50   1st Qu.:5.000  \n Median :3.210   Median :0.5100   Median :10.30   Median :6.000  \n Mean   :3.219   Mean   :0.5313   Mean   :10.49   Mean   :5.818  \n 3rd Qu.:3.320   3rd Qu.:0.6000   3rd Qu.:11.30   3rd Qu.:6.000  \n Max.   :4.010   Max.   :2.0000   Max.   :14.90   Max.   :9.000  \n     type          \n Length:6497       \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n```\n:::\n:::\n\n\n# 2. Building Correlation Matrix: pairs() method\n\nCreate a scatterplot matrix by using the *pairs* function of R Graphics.\n\nThe variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n::: panel-tabset\n## Basic correlation matrix\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nColumns 2 to 12 of wine dataframe is used to build the scatterplot matrix.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Half correlation matrix\n\nLower half of correlation matrix, `upper.panel` argument will be used as shown in code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nUpper half of correlation matrix, `lower.panel` argument will be used as shown in code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Correlation matrix (with coeff)\n\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, *panel.cor* function will be used. Higher correlation will be shown with larger font.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n:::\n\n# 3. Visualising Correlation Matrix: ggcormat() method\n\n::: callout-caution\n**Limitations of Correlation Matrix**\n\nScatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations).\n\nThree R packages provide function to plot corrgram are:\n\n-   [corrgram](https://cran.r-project.org/web/packages/corrgram/)\n\n-   [ellipse](https://cran.r-project.org/web/packages/ellipse/)\n\n-   [corrplot](https://cran.r-project.org/web/packages/corrplot/)\n:::\n\nUse `ggcormat()` to visualise correlation matrix.\n\n## 3.1 Basic Plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n**Learning Points**\n\n-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.\n\n-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to `ggcorrplot::ggcorrplot` function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.\n:::\n\n## 3.2 Multiple Plots\n\n::: callout-note\nFaceting is not available in *ggcorrmat()* but in `grouped_ggcorrmat()` of **ggstatsplot**.\n:::\n\n::: panel-tabset\n## Plotting side-by-side\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2), # change the no. of columns required\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  ),\n  ggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-10-1.png){width=1248}\n:::\n:::\n\n\n## Plotting top-bottom\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 1), # change the no. of columns required\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  ),\n  ggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 10),\n      axis.text.y = element_text(size = 10)))\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-11-1.png){width=2688}\n:::\n:::\n\n:::\n\n::: callout-note\n**Learning Points**\n\n-   Use argument `grouping.var` to build a facet plot.\n\n-   Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to *patchwork::wrap_plots*, except for guides argument which is already separately specified earlier.\n\n-   `annotation.args` argument calls *plot annotation arguments* of patchwork package.\n:::\n\n# 4. Visualising Correlation Matrix: corrplot Package\n\nIn the code chunk below, *cor()* of R Stats is used to compute the correlation matrix of wine data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\n```\n:::\n\n\n*corrplot()* is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n**Knowing the default settings**\n\n-   Visual object used to plot the corrgram is circle.\n\n-   Layout of the corrgram is a symmetric matrix.\n\n-   Colour scheme is diverging blue-red.\n\n-   Blue colours are used to represent pair variables with positive correlation coefficients.\n\n-   Red colours are used to represent pair variables with negative correlation coefficients.\n\n-   Intensity of the colour (aka **saturation)** is used to represent the strength of the correlation coefficient.\n\n-   Darker colours indicate relatively stronger linear relationship between the paired variables.\n\n-   Lighter colours indicates relatively weaker linear relationship.\n:::\n\nIn **corrplot** package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. \n\n*Seven visual geometrics: circle, square, ellipse, number, shade, color and pie.*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## 4.1 Working with layout\n\n*corrplor()* supports three layout types, namely: “full”, “upper” or “lower”. \n\n::: panel-tabset\n## Default plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Customised plot\n\narguments *diag* and *tl.col* are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n:::\n\n## 4.2 Working with mixed layout\n\nCreate a coorgram with mixed layout, the *corrplot.mixed()*, a wrapped function for mixed visualisation style will be used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Learning Points\n\nThe *lower* and *upper* are used to define the visualisation method used.\n\nIn this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram.\n\nThe argument *tl.pos*, on the other, is used to specify the placement of the axis label. The *diag* argument is used to specify the glyph on the principal diagonal of the corrgram.\n:::\n\n## 4.3 Combining corrgram with the significant test\n\nExample: Correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n\nUse the *p.mat* argument of *corrplot* function as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, \n                     conf.level= .95)\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n:::\n\n\n## 4.4 Reordering a corrgram\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the *order* argument of *corrplot()*. Currently, **corrplot** package support four sorting methods, they are:\n\n-   “AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n\n-   “FPC” for the first principal component order.\n\n-   “hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n-   “alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in **seriation** package.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## 4.5 Recordering a correlation matrix using hclust\n\nIf using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## 4.6 Customising the correlogram (colour)\n\nAdjust correlation matrix method from `ellipse` to `colour`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\ncol <- colorRampPalette(c(\"#BB4444\", \"#EE9988\", \"#FFFFFF\", \"#77AADD\", \"#4477AA\"))\n\ncorrplot(wine.cor, method=\"color\", col=col(200), \n         type=\"upper\", order=\"hclust\", \n         addCoef.col = \"black\", # Add coeff of correlation\n         tl.col=\"black\", #Text label color\n         # hide correlation coeff on the main diagonal\n         diag=FALSE\n         )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nCombine correlation with confidence level (95%)/ significance level (0.05)\n\nUse `insig = \"blank\"` to exclude insignificant values.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nwine.sig = cor.mtest(wine.cor, \n                     conf.level= .95)\n\ncol <- colorRampPalette(c(\"#BB4444\", \"#EE9988\", \"#FFFFFF\", \"#77AADD\", \"#4477AA\"))\n\ncorrplot(wine.cor, method=\"color\", col=col(200), \n         type=\"upper\", order=\"hclust\", \n         addCoef.col = \"black\", # Add coeff of correlation\n         tl.col=\"black\", #Text label color\n         # Combine with significance\n         p.mat = wine.sig$p, sig.level = 0.05, insig = \"blank\",\n         # hide correlation coeff on the main diagonal\n         diag=FALSE\n         )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex05-2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n# 5. References\n\n-   [6 Visual Correlation Analysis](https://r4va.netlify.app/chap06)\n-   [STHDA](http://www.sthda.com/english/wiki/visualize-correlation-matrix-using-correlogram)\n",
    "supporting": [
      "Hands-on_Ex05-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}