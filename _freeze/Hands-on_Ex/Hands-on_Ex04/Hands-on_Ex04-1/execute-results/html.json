{
  "hash": "0cd7b00a8ed82b03456b96052cffc87a",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 4 - Part 1\"\nsubtitle: \"Visualising Distribution\"\ndate: \"11 January 2024\"\ndate-modified: \"last-modified\"\nauthor: \"Teo Suan Ern\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n*Note: Last modified to include author’s details.*\n\n# 1. Getting Started\n\nThis hands-on exercise 4 is split into four segments:\n\n1.  Visualising Distribution\n\n2.  Visual Statistical Analysis\n\n3.  Visualising Uncertainty\n\n4.  Building Funnel Plot with R\n\n## 1.1 Install and launch R packages\n\nFor the purpose of this exercise, the following R packages will be used, they are:\n\n-   **tidyverse**, a family of R packages for data MATHS process,\n\n-   **ggridges**, a ggplot2 extension specially designed for plotting ridgeline plots, and\n\n-   **ggdist** for visualising distribution and uncertainty.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n## 1.2 Importing the data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n## 1.3 Overview of the data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nsummary(exam)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n```\n:::\n:::\n\n\n# 2. Visualising Distribution\n\n## 2.1 Visualising Distribution with Ridgeline Plot\n\n*Ridgeline plot* (aka *Joyplot*) is a data visualisation technique used to show the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\n::: panel-tabset\n### \\[Default\\]\n\nggridges package provides two main geom to plot gridgeline plots, they are: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using `geom_density_ridges()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nggplot(exam, \n       aes(x = MATHS, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"MATHS grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-1_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nA ridgelines plot shows the distribution of MATHS score by class.\n\n### \\[Varying colours\\]\n\nTo show varying colour (instead of solid colour), use either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nggplot(exam, \n       aes(x = MATHS, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"MATHS grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n### \\[Mapping probabilities\\]\n\nggridges package also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of MATHS score.\n\n**NOTE: It is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.**\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### \\[+ quantile lines\\]\n\nUse [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) to colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n### \\[+ custom quantile lines\\]\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 1.5% and 98.5% tails to colour the ridgeline plot as shown in the figure below.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\nggplot(exam,\n       aes(x = MATHS, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.015, 0.985)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.015]\", \"(0.015, 0.985]\", \"(0.985, 1]\")\n  ) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n:::\n\n## 2.2 Visualising Distribution with Raincloud Plot\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot. The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does.\n\n::: panel-tabset\n### \\[A-Half-eye graph\\]\n\nPlot a Half-Eye graph by using `stat_halfeye()` of **ggdist** package. The plot contains a half-density and a slab-interval (half-eye visualisation).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Learning point\n\nRemove the slab interval by setting .width = 0 and point_colour = NA.\n:::\n\n### \\[B-Add boxplot\\]\n\nAdd the second geometry layer using `geom_boxplot()` of ggplot2 which produces a narrow boxplot. Here, we reduce the width and adjust the opacity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### \\[C-Add dot plot\\]\n\nAdd the third geometry layer using `stat_dots()` of ggdist package which produces a half-dotplot. This plot is similar to a histogram that indicates the number of samples (number of dots) in each bin. Here, we select side = “left” to indicate we want it on the left-hand side.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### \\[D-Finishing touch\\]\n\nLastly, `coord_flip()` of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, theme_economist() of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex04-1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n:::\n\n# 3. References\n\n[9  Visualising Distribution](https://r4va.netlify.app/chap09)\n",
    "supporting": [
      "Hands-on_Ex04-1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}