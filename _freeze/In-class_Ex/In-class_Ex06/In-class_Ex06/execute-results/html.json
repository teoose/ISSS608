{
  "hash": "632f4ed9693b941e8d41c3b5014ae3ec",
  "result": {
    "markdown": "---\ntitle: \"In-class Exercise 6: Time on the Horizon: ggHoriPlot methods\"\nauthor: \"Teo Suan Ern\"\ndate: \"24 January 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n  editor: visual\n---\n\n\n# 1. Getting Started\n\n## Loading R packages\n\nThe code chunk used is as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\npacman::p_load(ggHoriPlot, ggthemes, tidyverse, RColorBrewer)\n```\n:::\n\n\n## Importing data\n\nThis in-class exercise uses dataset - [Average Retail Prices Of Selected Consumer Items](https://tablebuilder.singstat.gov.sg/table/TS/M212891).\n\nUse the code chunk below to import the AVERP.csv file into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\naverp <- read_csv(\"data/AVERP.csv\") %>%\n  mutate(`Date` = dmy(`Date`)) # mutate date (from initial character format)\n```\n:::\n\n\n# 2. Classic Line Graph Method\n\nCode chunk below plots classic line graph. This type of graph has its limitations in visualising large time-series data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\naverp %>% \n  filter(Date >= \"2018-01-01\") %>%\n  ggplot() +\n  geom_line(aes(x=Date, \n                y=Values, color=`Consumer Items`)) +\n  labs(x=\"Year\", y=\"Consumer Items Retail Prices\", \n       title = 'Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)') +\n  theme_minimal() +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    panel.grid = element_blank(),\n    axis.text.x = element_text(size = 8),\n    axis.text.y = element_text(size = 8),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n  scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n# 3. Horizon Graph\n\nAn alternative method will be to plot a horizon graph.\n\nCode chunk below plots horizon graph. This type of graph is suitable for massive time-series data.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show code\"}\naverp %>% \n  filter(Date >= \"2018-01-01\") %>%\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  facet_grid(`Consumer Items`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex06_files/figure-html/unnamed-chunk-4-1.png){width=1152}\n:::\n:::\n\n\n# Reference\n\n[20Â  Time on the Horizon: ggHoriPlot methods](https://r4va.netlify.app/chap20)\n",
    "supporting": [
      "In-class_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}