---
title: "Take-home Exercise 4-1"
subtitle: "Decoding Chaos: Initial Data Exploratory Analysis (IDEA)"
date: "27 February 2024"
date-modified: "last-modified"
author: "Teo Suan Ern"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
  editor: visual
---


# 1. Overview

------------------------------------------------------------------------

## 1.1 Project Brief

Take-home exercise 4 is the preliminary work of the final group project. Armed conflicts due to political violence and coordinated attacks targeting innocent civilians, have been on the rise globally. This threatens the public at both physical and psychological levels. A good visual analysis of armed conflicts is essential to help (1) discover armed conflicts trends and (2) conceptualise armed conflict spaces.

The project team consists of three members, and each member will take one of the main prototype modules as follows:

-   Exploratory Data Analysis (Initial & Geospatial)

-   Spatial Point Pattern Analysis

-   Multivariate Clustering Analysis

## 1.2 Project Objectives

The objective of my assignment is to build a prototype and user interface (UI) design on **Exploratory Data Analysis (Initial & Geospatial)** by using open-source data from armed conflict events (Armed Conflict Location & Event Data Project (ACLED)) to provide easy-to-use and insightful visualisation tools that can be especially suitable for Defence and Security sectors to develop effective counter measures and strategies.

## 1.3 Exploratory Data Analysis

This project is separated into two segments:

1.  Initial Data Exploratory Analysis (IDEA) – Current Page
2.  Geospatial Data Exploratory Analysis (GDEA) – [Click here for GDEA page](Take-home_Ex/Take-home_Ex04/Take-home_Ex04-2.html).

# 2. Storyboard

The Exploratory Data Analysis is developed into two main portions.

-   *Initial Data Exploratory Analysis* allows users to select different variables and perform initial exploration on the dataset for detailed analysis to discover distribution and trends of armed conflicts in Myanmar.

-   *Geospatial Data Exploratory Analysis* allows users to select different variables and perform initial spatial exploration on the dataset for detailed analysis to conceptualise armed conflict spaces in Myanmar.

The initial proposed layouts and features of the three sections under **Exploratory** are as follows:

## Overview

## Geospatial Exploration

## Data Analysis

# 3. Initial Data Preparation

------------------------------------------------------------------------

## 3.1 Install and launch R packages

The project uses `p_load()` of pacman package to check if the R packages are installed in the computer.

The following code chunk is used to install and launch the R packages.


```{r}
#| code-fold: true 
#| code-summary: "Show code" 
pacman::p_load(tidyverse, kableExtra,
               leaflet, rmarkdown, knitr,
               highcharter, # timeseries highchart
               viridis, ggthemes,
               ggplot2, tidyr, dplyr, viridisLite, RColorBrewer,  
               calendR, # calendar
               lubridate, # convert date from char to date format
               wordcloud, tidytext, # word cloud
               ggforce, # boxplot
               countrycode, sf, spdep, tmap, leaflet, # geospatial
               tm, plotly)
```


::: {.callout-warning icon="false" collapse="true"}
### R packages installed
:::

## 3.2 Import Data

The project will examine the dataset from [Armed Conflict Location & Event Data Project (ACLED)](https://acleddata.com/data-export-tool/), specifically Myanmar country, between Year 2010 and Year 2023.


```{r}
#| code-fold: true 
#| code-summary: "Show code"

data <- read.csv("data/1900-01-01-2024-02-26-Southeast_Asia-Myanmar.csv")
```


## 3.3 Overview of the data

The combined data consists of 113,177 observations and 30 variables. Each row details the armed conflict event on the type, agents, location, date and other characteristics of conflict events (such as political violence, demonstration) in Myanmar.

### Dataset Structure

#### Use `str()` to check the structure of the data.


```{r}
str(data)
```


The output above reveals that event_date is in character format instead of date format.

#### Use `colSums` to check for missing values

The output below shows that there are three variables with missing values. A quick check of the dataset reveals that population data is only available from Year 2020, which explains the reason for so many missing values.


```{r}
#| code-fold: true 
#| code-summary: "Show code" 
missing_values <- colSums(is.na(data)) 

missing_values_only <- missing_values[missing_values > 0]

missing_values %>% kable() 
```


#### Use `duplicate()` to check for duplicates:

There is no duplicate entries in the dataset.


```{r}
data[duplicated(data),]
```


# 4. Data Wrangling

------------------------------------------------------------------------

The flowchart diagram below provides an overview of the key variables used in this project.


```{mermaid}
%%| echo: false
flowchart TD
  A(Key Variables Used \n event_id_cnty)
  A --> B(Time Period)
  A --> C(Characteristic of Incident)
  A --> D(Location)
  
  B --> E(year)
  B --> F(date)
  B -.-> G(New Variables)
  G -.-> H(day)
  G -.-> I(week number)
  G -.-> J(month)


  C --> K(event_type)
  C --> L(sub_event_type)
  C --> M(actor1)
  C --> N(actor2)
  C --> O(fatalities)
  C -.-> P(New Variables)
  P -.-> Q(total incidents)
  P -.-> R(total fatalities)
  P -.-> S(political violence rate)
  P -.-> T(violence against civilian rate)
  P -.-> U(territory exchange rate \n-non-state exchange)
  P -.-> V(territory exchange rate \n-government regains territory)
  
  
  D --> W(country)
  D --> X(longitude)
  D --> Y(latitude)
  D --> Z(admin1)
  D --> AA(admin2)
  D --> AB(admin3)
  D --> AC(geometry points)
  D -.-> AD(New Variables)
  AD -.-> AE(shapeID)
```


## 4.1 Convert event_date format

The code chunk below uses `dmy()` convert to date format from character to date format:


```{r}
#| code-fold: true 
#| code-summary: "Show code" 
data$event_date <- dmy(data$event_date)
```


## 4.2 Create new variables

The code chunk below creates the following new variables based on total armed conflict incidents and total fatalities (by *disorder_type* and *sub_event_type*):

-   Political violence rate

-   Violence against civilian rate

-   Territory exchange rate (Non-state Exchange)

-   Territory exchange rate (Government Regains Territory)


```{r}
#| code-fold: true 
#| code-summary: "Show code" 
data2 <- data %>%
  filter(fatalities > 0) %>%
  group_by(year) %>%
  mutate(
    total_fata = sum(fatalities),
    
    total_inci = n(),
    
    ## incidents
    # Political violence rates
    political_rate = round(
      sum(total_inci[event_type %in% c("Battles", "Protests", "Explosions/Remote violence", "Violence against civilians")]) /
        sum(total_inci) * 100),
    
    # Violence against civilian rates
    civilian_rate = round(
      sum(total_inci[event_type == "Violence against civilians"]) / 
        sum(total_inci) * 100),
    
    # Exchange of territory
    non_state_exchange = round(
      sum(total_inci[sub_event_type == "Non-state actor overtakes territory"]) /
        sum(total_inci) * 100),
      
    govt_regain_exchange = round(
      sum(total_inci[sub_event_type == "Government regains territory"]) / 
        sum(total_inci) * 100),
    
    
    ## fatalities
    # Political violence rates
    political_rate = round(
      sum(total_fata[event_type %in% c("Battles", "Protests", 
                                       "Explosions/Remote violence", 
                                       "Violence against civilians")]) /
        sum(total_fata) * 100, 2),
    
    # Violence against civilian rates
    civilian_rate = round(
      sum(total_fata[event_type == "Violence against civilians"]) / 
        sum(total_fata) * 100, 2),
    
    # Exchange of territory
    non_state_exchange = round(
      sum(total_fata[sub_event_type == "Non-state actor overtakes territory"]) /
        sum(total_fata) * 100, 2),
      
    govt_regain_exchange = round(
      sum(total_fata[sub_event_type == "Government regains territory"]) / 
        sum(total_inci) * 100, 2)
    
  ) %>%
  ungroup()

```


## 4.3 Filter data columns

The code chunk below selects the variables intended to be used for this project.


```{r}
#| code-fold: true 
#| code-summary: "Show code" 
final <- data2 %>%
  select(-time_precision, -assoc_actor_1, -assoc_actor_2, -geo_precision, -source_scale, -timestamp, -tags, 
         -population_1km, -population_2km, -population_5km, -population_best)
```


The code chunk below save dataset in .rds format for subsequent geospatial EDA.


```{r}
#| code-fold: true 
#| code-summary: "Show code" 
write_rds(final, 
          "data/final.rds")
```


Use `str()` to check the structure of the final dataset.


```{r}
str(final)
```


# 5. Initial Exploratory Data Analysis

------------------------------------------------------------------------

## 5.1 Descriptive Statistics

Before proceeding with data visualisation, it is essential to be able to navigate the dataset of 13,177 observations and 30 variables with ease. This segment will help users identify or navigate through the dataset observations instead of scrolling through each observation one-by-one. The interactive datatable is created using DT package.

::: {.callout-note icon="false"}
### Design Features - Interactive Data Table

-   Display number of observations by selecting the dropdown (5, 10, 25, 50, 100 entries). This ensure that the observations will not span across the entire webpage.

-   View other pages of observations with "previous" or "next" button.

-   Search specific observations with the search bar for the occurrence of a string/ numerical value in any column of an observation

-   Filter observations with the filter bar directly below column headers.

-   Column visibility allows user to select the columns that they are interested to view and hide the rest
:::


```{r}
#| code-fold: true 
#| code-summary: "Show code"

DT::datatable(
  final, 
  class = "compact",
  filter = "top", 
  extensions = c("Buttons"),
  options = list(
    pageLength = 5,
    columnDefs = list(
      list(targets = c(1:21, 24:30), className = "dt-center"), # text align center
      list(targets = c(22, 23), visible = FALSE)
    ),
    buttons = list(
      list(extend = "colvis", columns = c(1:30))
      ),

    dom = "Bpiltf"
  ),
  caption = "Table 1:"
)

```


## 5.2 Distribution Analysis

### Distribution of armed conflicts and fatalities over the years in Myanmar

::: {.callout-note icon="false"}
### Design Features

-   The prototype proposes to include to the following interactivity elements for users' data exploratory:
    -   Dropbox filters such as *event_type* and *actor1*
    -   Radio button selection on *total armed conflicts* or *total fatalities*
    -   Slider bar to select the *years*
    -   Checkbox selection to filter/ select by *sub-national administrative region 1*
-   `forcats::fct_infreq` is used to assign frequency values to factor levels while visualising it over time period.
-   `geom_boxplot()` with the use of `ggplotly` provides statistical information such as *minimum, maximum, mean, median, first-and-third-quantile* values when hover-over.
-   `geom_sina()` is useful for plotting single variable in a multiclass dataset to show density distribution within each class.
:::


```{r}
#| code-fold: true 
#| code-summary: "Show code"
box1 <- ggplot(final, aes(x = forcats::fct_infreq(admin1), y = event_date, 
                          color = factor(admin1), fill = factor(admin1))) +
  geom_sina(method = "density", alpha = .3) +
  geom_boxplot(width = .2, color = "#000000", fill = NA, size = .5, 
               outlier.shape = NA, position = position_nudge(.25)) +
  coord_flip()+
  theme(legend.position = "none", 
        plot.title.position = "plot") +
  labs(title = "Frequency of Conflict Has Increased Over Time in Most Administrative Regions", subtitle = "Year 2010 to Year 2023") +
  labs(y = "Year (2010-2023)",
       x = "Adminstrative Region 1", 
       caption = "Data Source: ACLED (2023)")

ggplotly(box1)
```


## 5.3 Timeseries Analysis

### Trend of armed conflicts and fatalities in Myanmar

::: {.callout-note icon="false"}
### Design Features

-   The prototype proposes to include to the following interactivity elements for users' data exploratory:
    -   Dropbox filters such as *event_type* and *actor1*
    -   Radio button selection on *total armed conflicts* or *total fatalities*
    -   Slider bar to select the *years*
    -   Checkbox selection to filter/ select by *sub-national administrative region 1*
-   Information such as year, count of armed conflicts and fatalities will be available when hover-over.
:::


```{r}
#| code-fold: true 
#| code-summary: "Show code"
year_fata <- final %>%
  filter(fatalities > 0) %>%
  group_by(year) %>%
  select(year, fatalities) %>%
  summarise(total_fata = sum(fatalities),
            total_inci = n()) %>%
  ungroup()

hc_plot1 <-  highchart() %>% 
  hc_add_series(year_fata, hcaes(x = year, y = total_fata), type = "line", 
                name = "Total Fatalities", color = "lightcoral") %>%
  hc_add_series(year_fata, hcaes(x = year, y = total_inci), type = "line", 
                name = "Total Incidents", color = "black") %>%
  hc_tooltip(crosshairs = TRUE, borderWidth = 1.5, headerFormat = "", 
             backgroundColor = "#FCFFC5",
             borderWidth = 5,
             pointFormat = "Year: <b>{point.year}</b>
                                 <br> Fatalities: <b>{point.total_fata}</b>
                                 <br> Incidents: <b>{point.total_inci}</b>"
             ) %>%
  hc_title(text = "Armed Conflict Over The Years") %>% 
  hc_subtitle(text = "2010 to 2023") %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_yAxis(title = list(text = "Frequency"),
           allowDecimals = FALSE,
           plotLines = list(list(
             color = "lightcoral", width = 1, dashStyle = "Dash",
             value = mean(year_fata$total_fata),
             label = list(text = paste("Average fatalities:", round(mean(year_fata$total_fata))),
             style = list(color = 'lightcoral', fontSize = 20))))) %>% 
  hc_add_theme(hc_theme_flat())
hc_plot1
```


### Calendar visualisation of armed conflicts and fatalities

::: {.callout-note icon="false"}
### Design Features

-   The prototype proposes to include to the following interactivity elements for users' data exploratory:
    -   Dropbox filters on *years*
-   `geom_boxplot()` with the use of `ggplotly` provides statistical information such as *minimum, maximum, mean, median, first-and-third-quantile* values when hover-over.
-   `geom_sina()` is useful for plotting single variable in a multiclass dataset to show density distribution within each class.
:::

The code chunk below derives new variables by using `weekdays()`, `mday()`, `months()` and `isoweek()`.


```{r}
#| code-fold: true 
#| code-summary: "Show code"
calendar <- final %>%
  filter(fatalities > 0) %>%
  group_by(year, event_date, admin1) %>%
  mutate(
    wkday = weekdays(event_date),
    day = mday(event_date),
    month = factor(months(event_date), levels = rev(month.name)),
    week = isoweek(event_date)
  ) %>%
  ungroup()


# selected years
# years <- c(2010:2023)
years <- 2023

cal_conflict <- calendar %>%
  group_by(year, day, month, admin1) %>%
  filter(year == years) %>%
  summarise(total_fata = sum(fatalities)) %>%
  ungroup()
```

```{r}
#| code-fold: true 
#| code-summary: "Show code"
# tooltip
tooltip_heat <- paste("<b>", cal_conflict$day, " ", cal_conflict$month, " ", cal_conflict$year, "</b>", 
                      "\nFatalities : ", cal_conflict$total_fata)

heat <- ggplot(cal_conflict, aes(x = day, y = month, fill = total_fata)) + 
  geom_tile(color = "white", size = 1, aes(text = tooltip_heat)) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "Total Fatalities", low = "#fff2f4", high = "lightcoral") +
  labs(x = "Days of Month", 
       y = "Months of Year", 
       title = "Fatalities due to Armed Conflicts",
       caption = "Data Source: ACLED (2023)") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6),
        legend.position = "top")
```

```{r}
#| fig-width: 8
#| code-fold: true 
#| code-summary: "Show code"
# Convert ggplot to plotly (to include custom tooltip)
heat_plotly <- ggplotly(heat, tooltip = "text")

# Add caption
heat_plotly <- heat_plotly %>% 
  layout(
  annotations = list(
    text = "Data Source: ACLED (2023)",
    x = 1.1,
    y = -0.2,
    showarrow = FALSE,
    xref = "paper",
    yref = "paper"
  )
)

heat_plotly

```


## 5.4 Text Analysis

### Visual display of incident summary over the years

::: {.callout-note icon="false"}
### Design Features

-   The prototype proposes to include to the following interactivity elements for users' data exploratory:
    -   Dropbox filters on *years*. This allows quick visual summary on the keywords used in all armed conflict incidents of each year.
:::


```{r}
#| code-fold: true    
#| code-summary: "Show code" 

cloudtext1 <- final %>%
    select(year, notes)

cloudtext2 <- function(year) {
  subset_data <- cloudtext1 %>%
    filter(notes != "")
  
  docs <- Corpus(VectorSource(subset_data$notes))
  docs <- tm_map(docs, removeNumbers)
  docs <- tm_map(docs, removeWords, stopwords("english"))
  docs <- tm_map(docs, removePunctuation)
  docs <- tm_map(docs, stripWhitespace)
  docs <- tm_map(docs, stemDocument)
  
  dtm <- TermDocumentMatrix(docs)
  m <- as.matrix(dtm)
  v <- sort(rowSums(m), decreasing = TRUE)
  d <- data.frame(word = names(v), freq = v)
  
  wordcloud(d$word, d$freq, colors = brewer.pal(9, "Set3"), random.order = FALSE, rot.per = 0)
  title(main = paste("Incident Summary -", year), font.main = 1, col.main = "black", cex.main = 1.5)
}
```

```{r}
#| code-fold: true    
#| code-summary: "Show code" 

# selected years
# years <- c(2010:2023)

years <- 2023
# Word clouds for each year
cloud_patch <- lapply(years, cloudtext2)
```

```{r}
cloud_patch
```


# Reference

-   [ISSS608 AY2023-24 January Term (2024), Take-home Exercise 4](https://isss608-ay2023-24jan.netlify.app/take-home_ex/th_ex04){target="_blank"}

