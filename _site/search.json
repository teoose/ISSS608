[
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html",
    "title": "In-class Exercise 7",
    "section": "",
    "text": "In-class exercise 7 comprised of two parts on geospatial mapping with Tableau and R."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#install-and-launch-r-packages",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#install-and-launch-r-packages",
    "title": "In-class Exercise 7",
    "section": "1.1 Install and launch R packages",
    "text": "1.1 Install and launch R packages\nThe key R packages installed are as follows:\n\n\n\n\n\n\nR packages installed\n\n\n\n\n\n\nterra: a replacement of the raster package that is similar (but simpler and faster) interface than raster.\ngstat: an R package used for spatial and spatio-temporal geostatistical modelling, prediction and simulation.\nautomap: an R package for performing automatic variogram modelling and kriging interpolation.\n\n\n\n\n\npacman::p_load(sf, terra, gstat, automap,\n               tmap, viridis, tidyverse)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#the-data",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#the-data",
    "title": "In-class Exercise 7",
    "section": "2.1 The data",
    "text": "2.1 The data\nThere are three dataset used in this in-class exercise:\n\nRainfallStation.csv provides location information of existing rainfall stations in Singapore. The data is downloaded from Meteological Service Singapore.\nDAILYDATA_202402.csv provides weather data are rainfall stations for the month February, 2024. The data is also downloaded from Meteological Service Singapore.\nMPSZ-2019 contains planning subzone boundary of URA Master Plan 2019. It is downloaded from data.gov.sg in its original data kml format."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-rainfall-station-data",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-rainfall-station-data",
    "title": "In-class Exercise 7",
    "section": "2.2 Import rainfall station data",
    "text": "2.2 Import rainfall station data\nCode chunk below uses read_csv() of readr package to import RainfallStation.csv.\n\nrfstations &lt;-\n  read_csv(\"data/aspatial/RainfallStation.csv\")"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-rainfall-record-data",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-rainfall-record-data",
    "title": "In-class Exercise 7",
    "section": "2.3 Import rainfall record data",
    "text": "2.3 Import rainfall record data\nCode chunk below uses read_csv() of readr package to import DAILYDATA_202402.csv.\n\nrfdata &lt;-\n  read_csv(\"data/aspatial/DAILYDATA_202402.csv\") %&gt;%\n  select(c(1, 5)) %&gt;%\n  group_by(Station) %&gt;%\n  summarise(MONTHSUM = sum(`Daily Rainfall Total (mm)`)) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#convert-aspatial-data-into-geospatial-data",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#convert-aspatial-data-into-geospatial-data",
    "title": "In-class Exercise 7",
    "section": "2.4 Convert aspatial data into geospatial data",
    "text": "2.4 Convert aspatial data into geospatial data\nCode chunk below uses left_join() to combine rfdata dataset and rfstations dataset.\nNote: Station field is available in both data table of rfdata and rfstations, therefore, by() argument of left_join() is not required.\n\nrfdata &lt;-rfdata %&gt;%\n  left_join(rfstations)\n\nCode chunk below uses st_as_sf() to create geometry object based on longitude, latitude and crs 4326. It then pipe with st_transform() to transform to EPSG: 3414 (i.e. Singapore SVY21 Projected Coordinate).\n\nrfdata_sf &lt;- st_as_sf(rfdata,\n                      coords = c(\"Longitude\", \"Latitude\"),\n                      crs = 4326\n                      ) %&gt;%\n  st_transform(crs = 3414)\n\n\n\n\n\n\n\nLearning Points\n\n\n\n\ncoords argument is important to map the x-coordinates (i.e. Longitude) first, then follow by the y-coordinates (i.e. Latitude).\ncrs = 4326 indicates that the source data is in wgs84 coordinates system.\nst_transform() of sf package is then used to transform the source data from wgs84 to svy21 projected coordinates system.\nsvy21 is the official projected coordinates of Singapore. 3414 is the EPSG code of svy21."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-planning-subzone-boundary-data",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#import-planning-subzone-boundary-data",
    "title": "In-class Exercise 7",
    "section": "2.5 Import planning subzone boundary data",
    "text": "2.5 Import planning subzone boundary data\nCode chunk below uses st_read() of sf package is used to import MPSZ-2019 shapefile into R. The output is named mpsz2019. It is in polygon feature tibble data.frame format.\nNote: Given that the source data is in wgs84 coordinate system, st_transform() is used to transform the output of sf data.frame into svy21 project coordinates system.\n\nmpsz2019 &lt;- st_read(dsn = \"data/geospatial\",\n                    layer = \"MPSZ-2019\"\n                    ) %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `C:\\teoose\\ISSS608\\In-class_Ex\\In-class_Ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#gstat",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#gstat",
    "title": "In-class Exercise 7",
    "section": "5.1 gstat",
    "text": "5.1 gstat\nThere are three parameters of gstat function:\n\nformula: The prediction “formula” specifying the dependent and the independent variables (co-variates)\ndata: The calibration data\nmodel: The variogram model\n\n\nres &lt;- gstat(formula = MONTHSUM ~ 1, \n             locations = rfdata_sf, \n             nmax = 3,\n             set = list(idp = 0))\n\nCode chunk below uses predict() to interpolate (calculate predicted values):\nThe predict function accepts:\n\nA raster—stars object, such as dem\nA model—gstat object, such as g\n\nThe raster serves two purposes:\n\nSpecify the locations for making predictions (in all methods), and\nSpecify covariate values (in Universal Kriging method only).\n\n\nresp &lt;- predict(res, coop)\n\n[inverse distance weighted interpolation]\n\n\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\n\npred &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\", \n                         fun = \"mean\")\n\nCode chunk below interpolates surface by using tmap() function.\n\nn5 &lt;- tmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(pred) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\")\n\n\n\n\nWith the purpose to understand how the final surface map will be affected by the different nmax values, different variation of spatial interpolation can be made by changing nmax argument.\n\nnmax = 3nmax = 5nmax = 10nmax = 15\n\n\n\n\nShow code\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(pred) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\")\n\n\n\n\n\n\n\n\n\nShow code\nres5 &lt;- gstat(formula = MONTHSUM ~ 1, \n             locations = rfdata_sf, \n             nmax = 5,\n             set = list(idp = 0))\n\nresp5 &lt;- predict(res5, coop)\n\n\n[inverse distance weighted interpolation]\n\n\nShow code\nresp5$x &lt;- st_coordinates(resp5)[,1]\nresp5$y &lt;- st_coordinates(resp5)[,2]\nresp5$pred &lt;- resp5$var1.pred\n\npred5 &lt;- terra::rasterize(resp5, grid, \n                         field = \"pred\", \n                         fun = \"mean\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(pred5) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\")\n\n\n\n\n\n\n\n\n\nShow code\nres10 &lt;- gstat(formula = MONTHSUM ~ 1, \n             locations = rfdata_sf, \n             nmax = 10,\n             set = list(idp = 0))\n\nresp10 &lt;- predict(res10, coop)\n\n\n[inverse distance weighted interpolation]\n\n\nShow code\nresp10$x &lt;- st_coordinates(resp10)[,1]\nresp10$y &lt;- st_coordinates(resp10)[,2]\nresp10$pred &lt;- resp10$var1.pred\n\npred10 &lt;- terra::rasterize(resp10, grid, \n                         field = \"pred\", \n                         fun = \"mean\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(pred10) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\")\n\n\n\n\n\n\n\n\n\nShow code\nres15 &lt;- gstat(formula = MONTHSUM ~ 1, \n             locations = rfdata_sf, \n             nmax = 15,\n             set = list(idp = 0))\n\nresp15 &lt;- predict(res15, coop)\n\n\n[inverse distance weighted interpolation]\n\n\nShow code\nresp15$x &lt;- st_coordinates(resp15)[,1]\nresp15$y &lt;- st_coordinates(resp15)[,2]\nresp15$pred &lt;- resp10$var1.pred\n\npred15 &lt;- terra::rasterize(resp15, grid, \n                         field = \"pred\", \n                         fun = \"mean\")\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(pred10) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nObservations\n\n\n\n\nThe variations in nmax value revealed the following:\n\nFor maps with nmax values of 3 and 5, though both maps have the same mean range/ interval values, however, there is visible difference in their mapping.\nFor maps with nmax values of 10 and 15, both maps have the same mean range/ interval values with no/ little visible in their mapping.\n\n\n\n\n\n\n\n\n\n\nLearning Points\n\n\n\nA formula object is created using the ~ operator, which separates names of dependent variables (to the left of the ~ symbol) and independent variables (to the right of the ~ symbol). Writing 1 to the right of the ~ symbol, as in ~ 1, means that there are no independent variables38."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#gstats",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#gstats",
    "title": "In-class Exercise 7",
    "section": "6.1 gstats",
    "text": "6.1 gstats\nStep 1: Calculate and examine empirical variogram by using variogram() of gstat package.\nThe function requires two arguments:\n\nformula, the dependent variable and the covariates (same as in gstat in Section 5.1)\ndata, a point layer with the dependent variable and covariates as attributes\n\nCode chunk below shows Step 1 as described above.\n\nv &lt;- variogram(MONTHSUM ~ 1, \n               data = rfdata_sf)\nplot(v)\n\n\n\n\nStep 2: Comparison of the above plot with the theoretical models below:\n\n\n\nImage Source: ISSS608\n\n\nStep 3: Empirical variogram model will be fitted by using fit.variogram() of gstat package.\nCode chunk below shows Step 2 as described above.\n\nfv &lt;- fit.variogram(object = v,\n                    model = vgm(\n                      psill = 0.5, \n                      model = \"Sph\",\n                      range = 5000, \n                      nugget = 0.1))\nfv\n\n  model     psill    range\n1   Nug 0.1129190    0.000\n2   Sph 0.5292397 5213.396\n\n\nCode chunk below visualises how well the observed data fit the model by plotting fv.\n\nplot(v, fv)\n\n\n\n\nCode chunk below performs spatial interpolation by using the newly derived model.\n\nk &lt;- gstat(formula = MONTHSUM ~ 1, \n           data = rfdata_sf, \n           model = fv)\nk\n\ndata:\nvar1 : formula = MONTHSUM`~`1 ; data dim = 43 x 2\nvariograms:\n        model     psill    range\nvar1[1]   Nug 0.1129190    0.000\nvar1[2]   Sph 0.5292397 5213.396\n\n\nCode chunk below uses predict() to estimate the unknown grids.\n\nresp &lt;- predict(k, coop)\n\n[using ordinary kriging]\n\n\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\nresp$pred &lt;- resp$pred\nresp\n\nSimple feature collection with 314019 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 2692.528 ymin: 15773.73 xmax: 56371.45 ymax: 50231.33\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n   var1.pred  var1.var                  geometry        x        y     pred\n1   131.0667 0.6608399 POINT (25883.42 50231.33) 25883.42 50231.33 131.0667\n2   130.9986 0.6610337  POINT (25933.4 50231.33) 25933.40 50231.33 130.9986\n3   130.9330 0.6612129 POINT (25983.38 50231.33) 25983.38 50231.33 130.9330\n4   130.8698 0.6613782 POINT (26033.36 50231.33) 26033.36 50231.33 130.8698\n5   130.8092 0.6615303 POINT (26083.34 50231.33) 26083.34 50231.33 130.8092\n6   130.7514 0.6616697 POINT (26133.32 50231.33) 26133.32 50231.33 130.7514\n7   130.6965 0.6617971  POINT (26183.3 50231.33) 26183.30 50231.33 130.6965\n8   130.6446 0.6619131 POINT (26233.28 50231.33) 26233.28 50231.33 130.6446\n9   130.5958 0.6620184 POINT (26283.26 50231.33) 26283.26 50231.33 130.5958\n10  132.5484 0.6542154 POINT (25033.76 50181.32) 25033.76 50181.32 132.5484\n\n\nCode chunk below uses rasterize() of terra to create a raster surface data object.\nThe output object kpred is in SpatRaster object class with a spatial resolution of 50m x 50m. It consists of 1075 columns and 690 rows and in SVY21 projected coordinates system.\n\nkpred &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\")\nkpred\n\nclass       : SpatRaster \ndimensions  : 690, 1075, 1  (nrow, ncol, nlyr)\nresolution  : 49.98037, 50.01103  (x, y)\nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncoord. ref. : SVY21 / Singapore TM (EPSG:3414) \nsource(s)   : memory\nname        :      last \nmin value   :  72.77826 \nmax value   : 195.53284"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#mapping-the-interpolated-rainfall-raster",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#mapping-the-interpolated-rainfall-raster",
    "title": "In-class Exercise 7",
    "section": "6.2 Mapping the interpolated rainfall raster",
    "text": "6.2 Mapping the interpolated rainfall raster\nCode chunk below uses tmap() function to map the interpolated rainfall raster (i.e. kpred)\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"plot\")\ntm_shape(kpred) + \n  tm_raster(alpha = 0.6, \n            palette = \"viridis\",\n            title = \"Total monthly rainfall (mm)\") +\n  tm_layout(main.title = \"Distribution of monthly rainfall, Feb 2024\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#automatic-variogram-modelling",
    "href": "In-class_Ex/In-class_Ex07/In-class_Ex07.html#automatic-variogram-modelling",
    "title": "In-class Exercise 7",
    "section": "6.3 Automatic variogram modelling",
    "text": "6.3 Automatic variogram modelling\nCode chunk below uses autofirVariogram() of automap package can be used to perform varigram modelling.\n\nv_auto &lt;- autofitVariogram(MONTHSUM ~ 1, \n                           rfdata_sf)\nplot(v_auto)\n\n\n\n\n\nv_auto\n\n$exp_var\n   np      dist     gamma dir.hor dir.ver   id\n1  15  1957.436  311.9613       0       0 var1\n2  33  3307.349  707.7685       0       0 var1\n3  54  4861.368  848.1314       0       0 var1\n4 116  6716.531  730.3969       0       0 var1\n5 111  9235.708 1006.5381       0       0 var1\n6 120 11730.199 1167.5988       0       0 var1\n7 135 14384.636 1533.5903       0       0 var1\n\n$var_model\n  model    psill   range kappa\n1   Nug     0.00       0   0.0\n2   Ste 24100.71 1647955   0.3\n\n$sserr\n[1] 0.2178294\n\nattr(,\"class\")\n[1] \"autofitVariogram\" \"list\"            \n\n\n\nk &lt;- gstat(formula = MONTHSUM ~ 1, \n           model = v_auto$var_model,\n           data = rfdata_sf)\nk\n\ndata:\nvar1 : formula = MONTHSUM`~`1 ; data dim = 43 x 2\nvariograms:\n        model    psill   range kappa\nvar1[1]   Nug     0.00       0   0.0\nvar1[2]   Ste 24100.71 1647955   0.3\n\n\n\nresp &lt;- predict(k, coop)\n\n[using ordinary kriging]\n\n\n\nresp$x &lt;- st_coordinates(resp)[,1]\nresp$y &lt;- st_coordinates(resp)[,2]\nresp$pred &lt;- resp$var1.pred\nresp$pred &lt;- resp$pred\n\nkpred &lt;- terra::rasterize(resp, grid, \n                         field = \"pred\")"
  }
]