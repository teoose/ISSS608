---
title: "Hands-on Exercise 10"
subtitle: "Information Dashboard Design: R methods"
date: "2 March 2024"
date-modified: "last-modified"
author: "Teo Suan Ern"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# 1. Getting Started

## 1.1 Install and launch R packages

For the purpose of this exercise, the following R packages will be used.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 

pacman::p_load(lubridate, ggthemes, reactable, reactablefmtr, gt, gtExtras, tidyverse)
```

::: {.callout-note collapse="true" icon="false"}
### R packages installed

-   *tidyverse* provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data.

-   *lubridate* provides functions to work with dates and times more efficiently.

-   *ggthemes* is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.

-   *gtExtras* provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed to make useful tables using the R programming language.

-   *reactable* provides functions to create interactive data tables for R, based on the React Table library and made with reactR.

-   *reactablefmtr* provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customisable functions and themes.
:::

## 1.2 The data set

This exercise uses a personal database *Coffee Chain*  in Microsoft Access mdb format.

## 1.3 Import database into R

Code chunk below uses `odbcConnectAccess()` from **RODBC** package to import a database query table into R.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 

library(RODBC)
con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
coffeechain <- sqlFetch(con, 'CoffeeChain Query')
write_rds(coffeechain, "data/CoffeeChain.rds")
odbcClose(con)
```

*Note: Before executing the code chunk, there is a **need to change the R system to 32bit version** given that `odbcConnectAccess()` is **based on 32bit** and not 64bit*

## 1.4 Data Preparation

Code chunk below imports *CoffeeChain.rds* into R. This is an optional step if *CoffeeChain* is already available in R.

```{r}
coffeechain <- read_rds("data/rds/CoffeeChain.rds")
```

Code chunk below aggregates Sales and Budgeted Sales at the Product level.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 

product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
```

# 2. Plot bullet chart in ggplot2

Code chunk below plots the bullet charts using ggplot2 functions.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 

ggplot(product, aes(Product, current)) + 
  geom_col(aes(Product, max(target) * 1.01),
           fill="grey85", width=0.85) +
  geom_col(aes(Product, target * 0.75),
           fill="grey60", width=0.85) +
  geom_col(aes(Product, target * 0.5),
           fill="grey50", width=0.85) +
  geom_col(aes(Product, current), 
           width=0.35,
           fill = "black") + 
  geom_errorbar(aes(y = target,
                    x = Product, 
                    ymin = target,
                    ymax= target), 
                width = .4,
                colour = "red",
                size = 1) +
  coord_flip()
```

# 3. Plot sparklines using ggplot2

```{r}
#| code-fold: true    
#| code-summary: "Show code" 

sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)
```

Code chunk below is used to compute the minimum and maximum of the month sales.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 

mins <- group_by(sales_report, Product) %>% 
  slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>% 
  slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>% 
  filter(Month == max(Month))
```

Code chunk below is used to compute the 25 and 75 quantiles.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

quarts <- sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales, 
                              0.25),
            quart2 = quantile(Sales, 
                              0.75)) %>%
  right_join(sales_report)
```

## sparklines in ggplot2

```{r}
#| fig-width: 12
#| code-fold: true    
#| code-summary: "Show code"

ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'lightcoral') +
  geom_point(data = maxs, col = 'skyblue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())
```

# 4. Static Information Dashboard Design: gt and gtExtras methods

Static information dashboard is created by using gt and gtExtras packages.

## Plot a simple bullet chart

```{r}
#| code-fold: true    
#| code-summary: "Show code"

product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current, 
              target = target, 
              width = 60,
              palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

# 5. sparklines: gtExtras methods

Code chunk below is used to prepare the data.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

report <- coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate (Month = month(Date, 
                        label = TRUE, 
                        abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()
```

Code chunk below is used to convert the report data.frame into list columns.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

## 5.1 Plot Coffeechain Sales Report

Code chunk below plots coffeechain sales report.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop") %>%
   gt() %>%
   gt_plt_sparkline('Monthly Sales',
                    same_limit = FALSE)
```

## 5.2 Calculate Summary Statistics

Code chunk below calculates summary statistics.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            ) %>%
  gt() %>%
  fmt_number(columns = 4,
    decimals = 2)
```

## 5.3 Combine data.frame

Code chunk below adds statistics to dataset.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

spark <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

Code chunk below calculate mean, minimum and maximum values. Values are also round-up to nearest 2 decimal places.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

sales <- report %>% 
  group_by(Product) %>% 
  summarise("Min" = round(min(Sales, na.rm = T), 2),
            "Max" = round(max(Sales, na.rm = T), 2),
            "Average" = round(mean(Sales, na.rm = T), 2)
            )
```

```{r}
#| code-fold: true    
#| code-summary: "Show code"

sales_data = left_join(sales, spark)
```

## 5.4 Plot updated data.table

Code chunk below plots updated data.table.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales',
                   same_limit = FALSE)
```

## 5.5 Combine bullet chart and sparklines

Code chunk below combines the bullet chart and sparklines using the steps below.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 
```

```{r}
#| code-fold: true    
#| code-summary: "Show code"

sales_data = sales_data %>%
  left_join(bullet)
```

```{r}
#| code-fold: true    
#| code-summary: "Show code"

sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual, 
                target = Target, 
                width = 28,
                palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

# 6. Interactive Information Dashboard Design: reactable and reactablefmtr methods

Use code chunk below to install dataui R package to build interactive sparklines.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

remotes::install_github("timelyportfolio/dataui")
```

Code chunk below loads package into R environment.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

library(dataui)
```

## 6.1 Plot interactive sparklines

Code chunk below plots interactive sparklines by using reactablefmtr package we need to prepare the list field.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

report <- report %>%
  group_by(Product) %>%
  summarize(`Monthly Sales` = list(Sales))
```

Code chunk below uses `react_sparkline()` to plot the sparklines.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

reactable(
  report,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

## 6.2 Change page size

*Note: Default pagesize is 10.*

Code chunk below uses arguments `defaultPageSize` to change the default setting.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(report)
    )
  )
)
```

## 6.3 Add points and labels

Code chunk below uses `highlight_points` argument to show the minimum and maximum values points and `label` argument to label first and last values.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "skyblue"),
        labels = c("first", "last")
        )
    )
  )
)
```

## 6.4 Add reference line

Code chunk below uses `stateline` argument to add reference line (i.e. mean values).

```{r}
#| code-fold: true    
#| code-summary: "Show code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "skyblue"),
        statline = "mean"
        )
    )
  )
)
```

## 6.5 Add bandline

Code chunk below uses `bandline` argument to add bandline.

```{r}
#| code-fold: true    
#| code-summary: "Show code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report,
        highlight_points = highlight_points(
          min = "red", max = "skyblue"),
        line_width = 1,
        bandline = "innerquartiles",
        bandline_color = "green"
        )
    )
  )
)
```

## 6.6 Change from sparkline to sparkbar

Code chunk below displays values in sparkbars (using `react_sparkbar()`) instead of sparklines (`react_sparkline()`).

```{r}
#| code-fold: true    
#| code-summary: "Show code"

reactable(
  report,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)
```

# 7. Self-exploratory

Combine reference line (in section 6.4), interactive sparkline (in section 6.5) with sales_data datatable (in section 5.4).

```{r}
#| code-fold: true    
#| code-summary: "Show code"

reactable(
  sales_data,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        sales_data,
        highlight_points = highlight_points(
          min = "red", max = "skyblue"),
        line_width = 1,
        statline = "mean",
        bandline = "innerquartiles",
        bandline_color = "green"
        ))
  )
)
```

# 8. References

[31  Information Dashboard Design: R methods](https://r4va.netlify.app/chap31)
