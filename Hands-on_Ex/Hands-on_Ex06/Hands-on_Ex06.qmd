---
title: "Hands-on Exercise 6"
subtitle: "Visualising & Analysing Time-oriented Data"
date: "1 February 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
---

# 1. Getting Started

This exercise will over on the following:

-   plotting a calender heatmap by using **ggplot2** functions,

-   plotting a cycle plot by using **ggplot2** function,

-   plotting a slopegraph

-   plotting a horizon chart

## 1.1 Install and launch R packages

For the purpose of this exercise, the following R packages will be used.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 
pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, 
               knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)
```

## 1.2 Import the data

This exercise used the ***eventlog.csv*** dataset.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 
attacks <- read_csv("data/eventlog.csv")
```

## 1.3 Examine data structure

*kable()* can be used to review the structure of the imported data frame.

```{r}
#| code-fold: true  
#| code-summary: "Show code"  
kable(head(attacks))
```

There are three columns, namely *timestamp*, *source_country* and *tz*.

-   *timestamp* field stores date-time values in POSIXct format.

-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.

-   *tz* field stores time zone of the source IP address.

## 1.4 Data Preparation

### Step 1: Deriving *weekday* and *hour of day* fields

Derive two new fields namely *wkday* and *hour* before plotting the calendar heatmap, **by writing a `function()` to perform the task**.

```{r}
#| code-fold: true  
#| code-summary: "Show code"
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
  }
```

::: {.callout-note icon="false"}
### Note

-   `ymd_hms()` and `hour()` are from **lubridate** package, and

-   `weekdays()` is a **base** R function.
:::

### Step 2: Deriving the attacks tibble data frame

Beside extracting the necessary data into *attacks* data frame, `mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they’ll be ordered when plotting.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))
```

```{r}
#| code-fold: true  
#| code-summary: "Show code"

kable(head(attacks))
```

# 2. Plotting Calendar Heatmap

```{r}
#| code-fold: true  
#| code-summary: "Show code"

grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```

::: {.callout-note icon="false"}
### Learning Points

-   a tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour* fields.

-   a new field called *n* is derived by using `group_by()` and `count()` functions.

-   `na.omit()` is used to exclude missing value.

-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size` arguments are used to specify the border color and line size of the tiles.

-   `theme_tufte()` of **ggthemes** package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.

-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.

-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).
:::

# 3. Plotting Multiple Calendar Heatmaps

### Step 1: Deriving attack by country object

In order to identify the top four countries with the highest number of attacks, the following have to be done:

-   count the number of attacks by country,

-   calculate the percent of attackes by country, and

-   save the results in a tibble data frame.

    ```{r}
    #| code-fold: true  
    #| code-summary: "Show code"

    attacks_by_country <- count(
      attacks, source_country) %>%
      mutate(percent = percent(n/sum(n))) %>%
      arrange(desc(n))
    ```

### Step 2: Preparing the tidy data frame

Extract the attack records of the top four countries from attacks data frame and save the data in a new tibble data frame (i.e. *top4_attacks*).

```{r}
#| code-fold: true  
#| code-summary: "Show code"

# extracts top 4 source countries & save as top4
top4 <- attacks_by_country$source_country[1:4] 

top4_attacks <- attacks %>%
  # filter attack dataset to include only rows from top4
  filter(source_country %in% top4) %>% 
  count(source_country, wkday, hour) %>%
  
  # remove previous grouping from previous code action
  ungroup() %>%
  
  # convert variable 'source_country' to factor from top4
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  
  # remove rows with missing values
  na.omit()
```

### Step 3: Plotting multiple calendar heatmap

Use `ggplot2` package to plot multiple calendar heatmaps.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```

# 4. Plotting Cycle Plot

### Step 1: Importing data

The code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl** package and save it as a tibble data frame called *air*.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

air <- read_excel("data/arrivals_by_air.xlsx")
```

### Step 2: Deriving month and year fields

Two new fields called *month* and *year* are derived from *Month-Year* field.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))
```

### Step 3: Extracting the target country

For effective data visualisation design, use `as.factor()` to convert the value type of Year field from numeric to factor.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010) %>%
  mutate(year = as.factor(year))
```

### Step 4: Computing year average arrivals by month

The code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

### Step 5: Plotting cycle plot

```{r}
#| code-fold: true  
#| code-summary: "Show code"

ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  theme(axis.text.x = element_text(angle = 90, size = 4),
        panel.grid = element_blank()) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors")
```

# 5. Plotting Slopegraph

### Step 1: Importing data

```{r}
#| code-fold: true  
#| code-summary: "Show code"

rice <- read_csv("data/rice.csv")
```

### Step 2: Plotting slopegraph

For effective data visualisation design, use `factor()` to convert the value type of Year field from numeric to factor.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980",
                Caption = "Data Source: Rice Yield")
```

# 6. References

[17 Visualising & Analysing Time-oriented Data](https://r4va.netlify.app/chap17){target="_blank"}
