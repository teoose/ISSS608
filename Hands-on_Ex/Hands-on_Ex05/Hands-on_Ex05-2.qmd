---
title: "Hands-on Exercise 5 - Part 2"
subtitle: "Visual Correlation Analysis"
date: "15 January 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
---

# 1. Getting Started

## 1.1 Install and launch R packages

For the purpose of this exercise, the following R packages will be used, they are:

-   **tidyverse**, a family of R packages for data science process,

-   **plotly** for creating interactive funnel plot,

-   **corrplot** for varied plotting options in visualisation method, graphic layout, colour, legend etc.

-   **ggpubr** for customising ggplot2-based graphs

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse,
               ellipse, RColorBrewer)
```

## 1.2 Import the data

This exercise uses **winequality-red.csv** from [Wine Quality Data Set](https://archive.ics.uci.edu/dataset/186/wine+quality) of UCI Machine Learning Repository.

```{r}
#| code-fold: true 
#| code-summary: "Show code" 
wine <- read_csv("data/wine_quality.csv")
```

## 1.3 Overview of the data

```{r}
#| code-fold: true 
#| code-summary: "Show code" 
summary(wine)
```

# 2. Building Correlation Matrix: pairs() method

Create a scatterplot matrix by using the *pairs* function of R Graphics.

The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.

::: panel-tabset
## Basic correlation matrix

```{r}
pairs(wine[,1:11])
```

Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix.

```{r}
pairs(wine[,2:12])
```

## Half correlation matrix

Lower half of correlation matrix, `upper.panel` argument will be used as shown in code chunk below.

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

Upper half of correlation matrix, `lower.panel` argument will be used as shown in code chunk below.

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

## Correlation matrix (with coeff)

To show the correlation coefficient of each pair of variables instead of a scatter plot, *panel.cor* function will be used. Higher correlation will be shown with larger font.

```{r}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```
:::

# 3. Visualising Correlation Matrix: ggcormat() method

::: callout-caution
**Limitations of Correlation Matrix**

Scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations).

Three R packages provide function to plot corrgram are:

-   [corrgram](https://cran.r-project.org/web/packages/corrgram/)

-   [ellipse](https://cran.r-project.org/web/packages/ellipse/)

-   [corrplot](https://cran.r-project.org/web/packages/corrplot/)
:::

Use `ggcormat()` to visualise correlation matrix.

## 3.1 Basic Plot

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)
```

::: callout-note
**Learning Points**

-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.

-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to `ggcorrplot::ggcorrplot` function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.
:::

## 3.2 Multiple Plots

::: callout-note
Faceting is not available in *ggcorrmat()* but in `grouped_ggcorrmat()` of **ggstatsplot**.
:::

::: panel-tabset
## Plotting side-by-side

```{r}
#| code-fold: true
#| code-summary: "Show code"
#| fig-width: 13
#| fig-height: 6
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2), # change the no. of columns required
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  ),
  ggplot.component = list(
    theme(text=element_text(size=5),
      axis.text.x = element_text(size = 8),
      axis.text.y = element_text(size = 8)))
)
```

## Plotting top-bottom

```{r}
#| code-fold: true
#| code-summary: "Show code"
#| fig-width: 28
#| fig-height: 24
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 1), # change the no. of columns required
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  ),
  ggplot.component = list(
    theme(text=element_text(size=5),
      axis.text.x = element_text(size = 10),
      axis.text.y = element_text(size = 10)))
)
```
:::

::: callout-note
**Learning Points**

-   Use argument `grouping.var` to build a facet plot.

-   Behind *group_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to *patchwork::wrap_plots*, except for guides argument which is already separately specified earlier.

-   `annotation.args` argument calls *plot annotation arguments* of patchwork package.
:::

# 4. Visualising Correlation Matrix: corrplot Package

In the code chunk below, *cor()* of R Stats is used to compute the correlation matrix of wine data frame.

```{r}
wine.cor <- cor(wine[, 1:11])
```

*corrplot()* is used to plot the corrgram by using all the default setting as shown in the code chunk below.

```{r}
corrplot(wine.cor)
```

::: callout-note
**Knowing the default settings**

-   Visual object used to plot the corrgram is circle.

-   Layout of the corrgram is a symmetric matrix.

-   Colour scheme is diverging blue-red.

-   Blue colours are used to represent pair variables with positive correlation coefficients.

-   Red colours are used to represent pair variables with negative correlation coefficients.

-   Intensity of the colour (aka **saturation)** is used to represent the strength of the correlation coefficient.

-   Darker colours indicate relatively stronger linear relationship between the paired variables.

-   Lighter colours indicates relatively weaker linear relationship.
:::

In **corrplot** package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. 

*Seven visual geometrics: circle, square, ellipse, number, shade, color and pie.*

```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

## 4.1 Working with layout

*corrplor()* supports three layout types, namely: “full”, “upper” or “lower”. 

::: panel-tabset
## Default plot

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower")
```

## Customised plot

arguments *diag* and *tl.col* are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="lower",
         diag = FALSE,
         tl.col = "black")
```
:::

## 4.2 Working with mixed layout

Create a coorgram with mixed layout, the *corrplot.mixed()*, a wrapped function for mixed visualisation style will be used.

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

::: callout-note
## Learning Points

The *lower* and *upper* are used to define the visualisation method used.

In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram.

The argument *tl.pos*, on the other, is used to specify the placement of the axis label. The *diag* argument is used to specify the glyph on the principal diagonal of the corrgram.
:::

## 4.3 Combining corrgram with the significant test

Example: Correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.

Use the *p.mat* argument of *corrplot* function as shown in the code chunk below.

```{r}
#| eval: false
wine.sig = cor.mtest(wine.cor, 
                     conf.level= .95)

corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

## 4.4 Reordering a corrgram

Matrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the *order* argument of *corrplot()*. Currently, **corrplot** package support four sorting methods, they are:

-   “AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.

-   “FPC” for the first principal component order.

-   “hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.

    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.

-   “alphabet” for alphabetical order.

“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in **seriation** package.

```{r}
#| code-fold: true
#| code-summary: "Show code"
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

## 4.5 Recordering a correlation matrix using hclust

If using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.

```{r}
#| code-fold: true
#| code-summary: "Show code"
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

## 4.6 Customising the correlogram (colour)

Adjust correlation matrix method from `ellipse` to `colour`.

```{r}
#| code-fold: true
#| code-summary: "Show code"
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))

corrplot(wine.cor, method="color", col=col(200), 
         type="upper", order="hclust", 
         addCoef.col = "black", # Add coeff of correlation
         tl.col="black", #Text label color
         # hide correlation coeff on the main diagonal
         diag=FALSE
         )
```

Combine correlation with confidence level (95%)/ significance level (0.05)

Use `insig = "blank"` to exclude insignificant values.

```{r}
#| code-fold: true
#| code-summary: "Show code"
wine.sig = cor.mtest(wine.cor, 
                     conf.level= .95)

col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))

corrplot(wine.cor, method="color", col=col(200), 
         type="upper", order="hclust", 
         addCoef.col = "black", # Add coeff of correlation
         tl.col="black", #Text label color
         # Combine with significance
         p.mat = wine.sig$p, sig.level = 0.05, insig = "blank",
         # hide correlation coeff on the main diagonal
         diag=FALSE
         )
```

# 5. References

-   [6 Visual Correlation Analysis](https://r4va.netlify.app/chap06)
-   [STHDA](http://www.sthda.com/english/wiki/visualize-correlation-matrix-using-correlogram)
