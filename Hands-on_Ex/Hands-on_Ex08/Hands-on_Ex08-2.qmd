---
title: "Hands-on Exercise 8-2"
subtitle: "Visualising Geospatial Point Data"
date: "16 February 2024"
date-modified: "last-modified"
author: "Teo Suan Ern"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

*Note: Last modified to include author’s details.*

# 1. Getting Started

## 1.1 Install and launch R packages

For the purpose of this exercise, the following R packages will be used.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 
pacman::p_load(sf, tmap, tidyverse)
```

## 1.2 Import the data

***SGPools_svy21*** dataset is used for this hands-on exercise. The dataset is retrieved from [Singapore SVY21 Projected Coordinates System](https://www.sla.gov.sg/sirent/CoordinateSystems.aspx). The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 

sgpools <- read_csv("data/aspatial/SGPools_svy21.csv")
```

## 1.3 Examine data structure

```{r}
list(sgpools)
```

## 1.4 Data Preparation

### Creating a sf data frame from an aspatial dataframe

The code chunk below converts sgpools data frame into a simple feature data frame by using *st_as_sf()* of **sf** packages.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

sgpools_sf <- st_as_sf(sgpools, 
                       coords = c("XCOORD", "YCOORD"),
                       crs= 3414)
```

::: {.callout-note icon="false"}
### Learning Points

-   The *coords* argument requires users to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   The *crs* argument requilightcoral users to provide the coordinates system in epsg format. [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to [epsg.io](https://epsg.io/).

-   New variable *geometry* is created and added to the dataframe.
:::

```{r}
list(sgpools_sf)
```

The output shows that sgppols_sf is in point feature class with epsg ID - 3414. The bounding box provides information of the extend of the geospatial data.

# 2. **Drawing Proportional Symbol Map**

To create an **interactive proportional symbol map** in R, the view mode of tmap will be used.

The code churn below will turn on the interactive mode of tmap.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

tmap_mode("view")
```

## Plot Interactive Point Symbol Map

```{r}
#| code-fold: true
#| code-summary: "Show code"

tm_shape(sgpools_sf)+
tm_bubbles(col = "lightcoral",
           size = 1,
           border.col = "black",
           border.lwd = 1)
```

## Make the Map Proportional

To draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable *Gp1Gp2Winnings* is assigned to size visual attribute.

```{r}
#| code-fold: true
#| code-summary: "Show code"

tm_shape(sgpools_sf)+
tm_bubbles(col = "lightcoral",
           size = "Gp1Gp2 Winnings",
           border.col = "black",
           border.lwd = 1)
```

## Adjust the Map with Different Colours

The proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, *OUTLET_TYPE* variable is used as the colour attribute variable.

```{r}
#| code-fold: true
#| code-summary: "Show code"

tm_shape(sgpools_sf)+
tm_bubbles(col = "OUTLET TYPE", 
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1)
```

## Plot Twin Maps

::: {.callout-warning icon="false"}
### Design Feature of tmap

Works with faceted plots. The argument *sync* in *tm_facets()* can be used to produce multiple maps with synchronised zoom and pan settings.
:::

```{r}
#| code-fold: true
#| code-summary: "Show code"

tm_shape(sgpools_sf) +
  tm_bubbles(col = "OUTLET TYPE", 
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1) +
  tm_facets(by= "OUTLET TYPE",
            nrow = 1,
            sync = TRUE)
```

Switch **tmap**’s viewer back to plot mode by using the code chunk below.

```{r}
tmap_mode("plot")
```

# 3. References

[22 Visualising Geospatial Point Data](https://r4va.netlify.app/chap22.html){target="_blank"}
