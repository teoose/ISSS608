---
title: "In-class Exercise 9"
subtitle: "Modelling, Visualising and Analysing Network Data with R"
date: "16 March 2024"
date-modified: "last-modified"
author: "Teo Suan Ern"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
  editor: visual
---

*Note: This in-class exercise is similar to hands-on exercise 9 (simplified version).*

# 1. Getting Started

## 1.1 Install and launch R packages

For the purpose of this exercise, the following R packages will be used.

```{r}
#| code-fold: true    
#| code-summary: "Show code" 

pacman::p_load(igraph, tidygraph, ggraph, visNetwork, 
               lubridate, # for date
               clock, # for time
               tidyverse, graphlayouts,
               patchwork)
```

## 1.2 The data

The data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also know as link) data.

### **1.2.1 The edges data**

*GAStech-email_edges.csv* which consists of two weeks of 9063 emails correspondances between 55 employees.

### **1.2.2 The nodes data**

*GAStech_email_nodes.csv* which consist of the names, department and title of the 55 employees.

### 1.2.3 Import network data

Use `read_csv()` of **readr** package to import *GAStech_email_node.csv* and *GAStech_email_edges-v2.csv* into RStudio environment.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

GAStech_nodes <- read_csv("data/GAStech_email_node.csv")
GAStech_edges <- read_csv("data/GAStech_email_edge-v2.csv")
```

### 1.2.4 Data Wrangling

The code chunk below will be used to perform the changes with the use of *dmy()* and *wday()* to extract the date and day of week respectively.

*Note that the initial date format is in character format instead of date format.*

```{r}
#| code-fold: true  
#| code-summary: "Show code"

GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,  # to extract the day of the week
                        label = TRUE,
                        abbr = FALSE)) # e.g if abbr = TRUE, value will be Mon instead of Monday
```

### **1.2.5 Data wrangling attributes**

 *GAStech_edges* data.frame reveals that it consists of individual e-mail flow records.

The code chunk below aggregates the individual by date, senders, receivers, main subject and day of the week, and filter *"work related"* MainSubject.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>% # to filter out senders who sends to self
  filter(Weight > 1) %>% # to filter out senders that only send out 1 email
  ungroup()
```

### 1.2.6 Review revised data fields

Table below shows the data structure of the reformatted *GAStech_edges_aggregated* data frame.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

glimpse(GAStech_edges_aggregated)
```

# 2. Create Network Objects using tidygraph

*Note: Use class(GAStech_nodes) in R console to check the structure of the data frame, need to ensure that it should be a tibble data frame.*

Graph data model will be created using **tidygraph** package. **Tidygraph** provides a tidy API for graph/network manipulation.

*Note: The current network data itself is not tidy, but it can be envisioned as two tidy tables (1) for node data and (2) for edge data.*

::: {.callout-tip icon="false"}
**tidygraph** provides:

-   a way to switch between the two tables and provides dplyr verbs for manipulating them.

-   access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.
:::

## 2.1 The tbl_graph object

Two functions of **tidygraph** package can be used to create network objects, they are:

-   `tbl_graph()` creates a **tbl_graph** network object from nodes and edges data.

-   `as_tbl_graph()` converts network data and objects to a **tbl_graph** network. Below are network data and objects supported by `as_tbl_graph()`

    -   a node data.frame and an edge data.frame,

    -   data.frame, list, matrix from base,

    -   igraph from igraph,

    -   network from network,

    -   dendrogram and hclust from stats,

    -   Node from data.tree,

    -   phylo and evonet from ape, and

    -   graphNEL, graphAM, graphBAM from graph (in Bioconductor).

## 2.2 **The dplyr verbs in tidygraph**

### 2.2.1 Use **`tbl_graph()` to build tidygraph data model**

Use `tbl_graph()` of **tinygraph** package to build an tidygraph’s network graph data.frame.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE) # set to true to ensure that both parties have sent emails to each other before (a.k.a establish connection)
```

### 2.2.2 Review output tidygraph's graph object

Use code chunk below to check if the network graph is properly incorporated in the graph object. The output below will produce 54 nodes and 1,372 edges.

```{r}
GAStech_graph
```

### 2.2.3 Change active object

The nodes tibble data frame is activated by default, however, this can be changed to active data frame with the `activate()` function. Rearrange the rows in the edges tibble to list those with the highest “weight” first, followed by using `activate()` and then `arrange()`.

Use code chunk below to perform the above steps.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

# 3. Plot Static Network Graphs with ggraph package

**ggraph** is an extension of **ggplot2**, making it easier to carry over basic ggplot skills to the design of network graphs.

There are three main aspects to a **ggraph**’s network graph, they are:

-   nodes,

-   edges and

-   layouts.

The code chunk below uses *ggraph()*, *geom-edge_link()* and *geom_node_point()* to plot a network graph by using *GAStech_graph*.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

## 3.1 Changing the default network graph theme

Use `theme_graph()` to remove the x and y axes.

*Note: `geom_edge_link()` and `geom_node_point()` are part of tidygraph. Separately, there is a difference between `geom_edge_link()` and `geom_edge_arc()` is in its line, the former is a vertical straight line, while the latter forms a curve line.*

```{r}
#| code-fold: true  
#| code-summary: "Show code"

g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

## 3.2 Changing the colour of the plot

Use `theme_graph()` as well to change the color of the plot.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

## 3.4 Working with ggraph's layouts

**ggraph** support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, sphere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by `ggraph()`.

Use *layout* argument to define the layout to be used.

```{r}
ggraph(GAStech_graph,
            layout = "fr") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as fr") +
  theme_graph()+
  theme(legend.position = "none")
```

Self-exploratory segment to test out the different types of layout.

```{r}
#| echo: false

# nicely
g1 <- ggraph(GAStech_graph,
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as nicely") +
  theme_graph()+
  theme(legend.position = "none")


# star
g2 <- ggraph(GAStech_graph,
            layout = "star") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as star") +
  theme_graph()+
  theme(legend.position = "none")


# circle
g3 <- ggraph(GAStech_graph,
            layout = "circle") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as circle") +
  theme_graph()+
  theme(legend.position = "none")


# dh
g4 <- ggraph(GAStech_graph,
            layout = "dh") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as dh") +
  theme_graph()+
  theme(legend.position = "none")

# gem
g5 <- ggraph(GAStech_graph,
            layout = "gem") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as gem") +
  theme_graph()+
  theme(legend.position = "none")


# dh
g6 <- ggraph(GAStech_graph,
            layout = "graphopt") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as graphopt") +
  theme_graph()+
  theme(legend.position = "none")


# grid
g7 <- ggraph(GAStech_graph,
            layout = "grid") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as grid") +
  theme_graph()+
  theme(legend.position = "none")


# mds
g8 <- ggraph(GAStech_graph,
            layout = "mds") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as mds") +
  theme_graph()+
  theme(legend.position = "none")


# sphere
g9 <- ggraph(GAStech_graph,
            layout = "sphere") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as sphere") +
  theme_graph()+
  theme(legend.position = "none")


# randomly
g10 <- ggraph(GAStech_graph,
            layout = "randomly") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as randomly") +
  theme_graph()+
  theme(legend.position = "none")


# fr - Fruchterman and Reingold
g11 <- ggraph(GAStech_graph,
            layout = "fr") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as fr") +
  theme_graph()+
  theme(legend.position = "none")


# kk
g12 <- ggraph(GAStech_graph,
            layout = "kk") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as kk") +
  theme_graph()+
  theme(legend.position = "none")


# drl
g13 <- ggraph(GAStech_graph,
            layout = "fr") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as drl") +
  theme_graph()+
  theme(legend.position = "none")


# lgl
g14 <- ggraph(GAStech_graph,
            layout = "lgl") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 1)) +
  labs(title = "Layout as lgl") +
  theme_graph() +
  theme(legend.position = "none")

```

```{r}
#| fig-width: 12
#| fig-height: 15
#| code-fold: true  
#| code-summary: "Show code"

(g1 | g2 | g3) / (g4 | g5 | g6) / (g7 | g8 | g9) / (g10 | g11 | g12) /
  (g13 | g14 | plot_spacer()) +
  plot_annotation(tag_levels = 'A') +
  plot_layout(widths = c(3,3,3),
              heights = c(3,3,3,3,3))
```

## 3.5 Modifying network nodes

Code chunk below colour each node by referring to their respective departments (to include aesthetics).

```{r}
#| code-fold: true  
#| code-summary: "Show code"

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

## 3.6 Modifying edges

Code chunk below adjust the thickness of the edges which will be mapped with the *Weight* variable.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), # thickness of line map to weight values
                 alpha=0.2) + # to introduce opacity on the line
  scale_edge_width(range = c(0.1, 5)) + # to include scale (range) of the thickness
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

# 4. Create Facet Graphs

There are three functions in ggraph to implement faceting, they are:

-   `facet_nodes()` whereby edges are only draw in a panel if both terminal nodes are present here,

-   `facet_edges()` whereby nodes are always drawn in all panels even if the node data contains an attribute named the same as the one used for the edge facetting, and

-   `facet_graph()` faceting on two variables simultaneously.

## 4.1 Working with *facet_edges()*

Code chunk below uses `facet_edges()`.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

Code chunk below uses `facet_edges()`, and uses `theme()` to change the position of the legend.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

Code chunk below uses `th_foreground()` to add frame to each graph.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## 4.2 Working with *facet_nodes()*

Code chunk below uses `facet_nodes()`.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

# 5. Network Metrics Analysis

Centrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

## 4.3 Visualising network metrics

::: {.callout-note icon="false"}
It is important to note that from **ggraph v2.0** onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.
:::

```{r}
#| code-fold: true  
#| code-summary: "Show code"

g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

## 4.4 Visualising community

tidygraph package inherits many of the community detection algorithms imbedded into igraph, including

-    *Edge-betweenness (group_edge_betweenness)*

-    *Leading eigenvector (group_leading_eigen)*

-    *Fast-greedy (group_fast_greedy)*

-    *Louvain (group_louvain)*, *Walktrap (group_walktrap)*

-    *Label propagation (group_label_prop)*

-    *InfoMAP (group_infomap)*

-    *Spinglass (group_spinglass)*

-    *Optimal (group_optimal)*

Some community algorithms are designed to take into account direction or weight, while others ignore it.

::: panel-tabset
### Edge-betweenness (group_edge_betweenness)

```{r}
#| code-fold: true  
#| code-summary: "Show code"

gc1 <- GAStech_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

gc1 + theme_graph()
```

### Leading eigenvector (group_leading_eigen)

```{r}
#| code-fold: true  
#| code-summary: "Show code"

gc2 <- GAStech_graph %>%
  mutate(community = as.factor(group_leading_eigen(weights = Weight, steps = -1, label = NULL, 
                                                   options = arpack_defaults(), n_groups = NULL))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

gc2 + theme_graph()
```

### Fast-greedy (group_fast_greedy)

```{r}
#| code-fold: true  
#| code-summary: "Show code"

gc3 <- GAStech_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE, n_groups = NULL))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

gc3 + theme_graph()
```

### Walktrap (group_walktrap)

```{r}
#| code-fold: true  
#| code-summary: "Show code"

gc4 <- GAStech_graph %>%
  mutate(community = as.factor(group_walktrap(weights = Weight, steps = 4, n_groups = NULL))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

gc4 + theme_graph()
```

### Label propagation (group_label_prop)

```{r}
#| code-fold: true  
#| code-summary: "Show code"

gc5 <- GAStech_graph %>%
  mutate(community = as.factor(group_label_prop(weights = Weight, label = NULL, fixed = NULL))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

gc5 + theme_graph()
```

### InfoMAP (group_infomap)

```{r}
#| code-fold: true  
#| code-summary: "Show code"

gc6 <- GAStech_graph %>%
  mutate(community = as.factor(group_infomap(weights = NULL, node_weights = NULL, trials = 10))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

gc6 + theme_graph()
```

### Spinglass (group_spinglass)

```{r}
#| code-fold: true  
#| code-summary: "Show code"

gc7 <- GAStech_graph %>%
  mutate(community = as.factor(group_spinglass(weights = Weight))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

gc7 + theme_graph()
```
:::

# 6. Build Interactive Network Graphs with visNetwork

-   [visNetwork()](http://datastorm-open.github.io/visNetwork/) is a R package for network visualization, using [vis.js](http://visjs.org/) javascript library.

-   *visNetwork()* function uses a nodes list and edges list to create an interactive graph.

    -   The nodes list must include an “id” column, and the edge list must have “from” and “to” columns.

    -   The function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.

## 6.1 Data Preparation

Code chunk below prepares dataset for interactive network graph.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

## 6.2 Plot Interactive Network Graph

Code chunk below plots interactive network graph.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```

## 6.2 Work with layout

Code chunk below uses *Fruchterman and Reingold* layout.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 
```

## 6.3 Work with visual attributes - nodes

`visNetwork()` looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.

The code chunk below renames Department field to group.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 
```

Rerun with the code chunk below, visNetwork shades the nodes by assigning unique colour to each category in the *group* field.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

## 6.4 Work with visual attributes - edges

Code chunk below runs `visEdges()` which is used to symbolise the edges.

-   The argument *arrows* is used to define where to place the arrow.

-   The *smooth* argument is used to plot the edges using a smooth curve.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

## 6.5 Incorporate Interactivity

Code chunk below uses `visOptions()` to incorporate interactivity features in the data visualisation.

-   The argument *highlightNearest* highlights nearest when clicking a node.

-   The argument *nodesIdSelection* adds an id node selection creating an HTML select element.

```{r}
#| code-fold: true  
#| code-summary: "Show code"

visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

# 7. References

[27 Modelling, Visualising and Analysing Network Data with R](https://r4va.netlify.app/chap27)

[Tidygraph - Group nodes and edges based on community structure](https://tidygraph.data-imaginist.com/reference/group_graph.html)
